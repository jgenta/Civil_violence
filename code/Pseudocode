% +create lattice                                                                                       //FUNCTION: main
% +(spacial grid): [xsize][ysize][3]-array: [x][y][1] for all agents (0=unoccupied; 1=occupied); [x][y][2] for active agents (1=active; 0=not active/ unoccupied); [x][y][3] for cops (1, or 0)
% +(array for agents): [1]: active or inactive; [2]: x-position; [3]: y-position; [4] Grievance; [5]risk aversion; [6] Jail (counting down if arrested; 0=free, check at end of time loop if reaching 1: place on grid, calculate if active or inactive)
% 
% +
% 
% +  
% 
% +initialize:                                                                                          //NOTE: every implemented function goes in main...main takes also care of initialization
% 
% +  (hardship H (U(0,1) for each agent))
% 
% +  legitimacy L(global, define between 0 and 1)
% 
% +  (risk aversion R (U(0,1) for each agent))
% 
% +  vision v and v* (moore neighborhood (order), later directionality and stuff)
% 
% +  Threshold (global constant between -1 and 1)
% 
% +  
% 
% +for (agentnumber=0:1:maxnumber)
% 
% +  Calculate:
% 
% +    Grieveance G=H(1-L)
% 
% +end
% 
% +
% 
% +for (t=0:timestep: endtime)
% +  for-loop over people: movement
%
% +  for-loop over whole grid: getting active or inactive /arresting
%
% +  evaluate magnitude (in terms of agents) of insurgencies                                            //FUNCTION: broadcast_news  
%
% +  
%
% +  move agents & cops (directionality for cops...maybe also for agents)                               //FUNCTION: move
%
% +     
% 
% +  for (agentnumber=0:1:maxnumber):
%
% +    update R                                                                                         //FUNCTION: update_agent
% 
% +    update arrest probability P=1-exp[-k(C/A)_v]
% 
% +    net risk: N=RPJ^a, in our case a=0
% 
% +    if (G-N>T)
% 
% +      go active
% 
% +    end
% 
% +  end
% 
% +  for (cop=0:1:number of cops)
%
% +     update arrest success probability                                                               //FUNCTION: update_cops
%      
% +     randomly arrest an active agent in the field of view (permanently removed form the lattice)     //FUNCTION: arrest
%
% +  end
%
% +  visualize lattice                                                                                  //FUNCTION: show
%
% +end 
